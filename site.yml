---
- hosts: localhost
  gather_facts: false
  vars:
    getrc: "{{ playbook_dir }}/getrc"
    rcfile: "/tmp/rcfile"
  tasks:
    - name: define return code per attempt
      copy: dest="{{ rcfile }}" content=1,0

    - name: wait for zero (succeeds on attempt#2)
      command: "{{ getrc }} {{ rcfile }}"
      register: cmd
      changed_when: false
      delegate_to: localhost
      become: false
      until: cmd.rc == 0
      retries: 5
      delay: 2

    - name: define return code per attempt
      copy: dest="{{ rcfile }}" content=1

    - name: wait for zero (fails after exhausting retries)
      when: false  # skipped by default, comment condition to run this task
      command: "{{ getrc }} {{ rcfile }}"
      register: cmd
      changed_when: false
      delegate_to: localhost
      become: false
      until: cmd.rc == 0
      retries: 5
      delay: 2

    - name: define return code per attempt
      copy: dest="{{ rcfile }}" content=1

    - name: wait for non-zero (until-condition is true but fails due to non-zero command rc)
      when: false  # skipped by default, comment condition to run this task
      command: "{{ getrc }} {{ rcfile }}"
      register: cmd
      changed_when: false
      delegate_to: localhost
      become: false
      until: cmd.rc != 0
      retries: 5

    - name: define return code per attempt
      copy: dest="{{ rcfile }}" content=0,0,3

    - name: wait for non-zero (succeeds on attempt#3 iff failed_when is specified)
      command: "{{ getrc }} {{ rcfile }}"
      register: cmd
      changed_when: false
      failed_when: cmd.rc == 0  # NOTE the explicit condition
      delegate_to: localhost
      become: false
      until: cmd.rc != 0
      retries: 5
      delay: 2

    - name: define return code per attempt
      copy: dest="{{ rcfile }}" content=0

    - name: wait for non-zero (WRONG, succeeds due to bad failed_when condition)
      command: "{{ getrc }} {{ rcfile }}"
      register: cmd
      changed_when: false
      failed_when: false        # NOTE too simple, do-until will never fail!
      delegate_to: localhost
      become: false
      until: cmd.rc != 0
      retries: 5
      delay: 2

#
# LEARNINGS
#
# In general the until-loop does what it is supposed to do. However, such a
# task may fail for different reasons:
#
# (a) The retries limit is exhausted but the until-condition has not become true.
#     Surely, this is what most users will expect.
# (b) The called module itself reports failure (in case of "command" this means
#     a non-zero exit code). Then the task will fail even if the unti-condition
#     is true.
#
# Waiting for a command to return a non-zero code is possible but the task MUST
# be annotated with a "failed_when" directive that overrides the module default.
#
# BEWARE: "failed_when: false" is not specific enough. This will prohibit the
# task to fail even if the do-until condition is false.
#
